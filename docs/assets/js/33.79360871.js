(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{371:function(t,v,_){"use strict";_.r(v);var a=_(43),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"聊聊各种加密以及加密在https中的应用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#聊聊各种加密以及加密在https中的应用"}},[t._v("#")]),t._v(" 聊聊各种加密以及加密在HTTPS中的应用")]),t._v(" "),_("h2",{attrs:{id:"一、目前常用的加密算法主要分成三类："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、目前常用的加密算法主要分成三类："}},[t._v("#")]),t._v(" 一、目前常用的加密算法主要分成三类：")]),t._v(" "),_("ul",[_("li",[t._v("对称加密算法")]),t._v(" "),_("li",[t._v("非对称加密算法")]),t._v(" "),_("li",[t._v("消息摘要算法")])]),t._v(" "),_("blockquote",[_("p",[t._v("在互联网中，信息防护主要涉及两个方面：信息窃取和信息篡改。对称/非对称加密算法能够避免信息窃取，而消息摘要算法能够避免信息篡改。")])]),t._v(" "),_("h3",{attrs:{id:"对称加密算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对称加密算法"}},[t._v("#")]),t._v(" 对称加密算法")]),t._v(" "),_("p",[_("code",[t._v("发送方和接收方需要持有同一把密钥")]),t._v("，发送消息和接收消息均使用该密钥。")]),t._v(" "),_("p",[t._v("相对于非对称加密，对称加密具有"),_("code",[t._v("更高的加解密速度")]),t._v("，但"),_("code",[t._v("双方都需要事先知道密钥")]),t._v("，密钥在传输过程中可能会被窃取，因此安全性没有非对称加密高。")]),t._v(" "),_("h3",{attrs:{id:"非对称加密算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密算法"}},[t._v("#")]),t._v(" 非对称加密算法")]),t._v(" "),_("p",[t._v("接收方在发送消息前需要事先生成"),_("code",[t._v("公钥和私钥")]),t._v("，然后将公钥发送给发送方。发送放收到公钥后，将待发送数据用公钥加密，发送给接收方。接收到收到数据后，用私钥解密。\n在这个过程中，"),_("code",[t._v("公钥负责加密，私钥负责解密")]),t._v("，数据在传输过程中即使被截获，攻击者由于没有私钥，因此也无法破解。")]),t._v(" "),_("p",[t._v("非对称加密算法的加解密速度低于对称加密算法，但是"),_("code",[t._v("安全性更高")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"消息摘要算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息摘要算法"}},[t._v("#")]),t._v(" 消息摘要算法")]),t._v(" "),_("p",[t._v("消息摘要算法可以验证信息是否被篡改。")]),t._v(" "),_("p",[t._v("在数据发送前，首先使用消息摘要算法生成该数据的签名，然后签名和数据一同发送给接收者。接收者收到数据后，对收到的数据采用消息摘要算法获得签名，最后比较签名是否一致，以此来判断数据在传输过程中是否发生修改。")]),t._v(" "),_("p",[t._v("无论输入的消息有多长，计算出来的消息摘要的长度总是固定的。例如应用MD5算法摘要的消息有128个比特位，用SHA-1算法摘要的消息最终有160比特位的输出，SHA-1的变体可以产生192比特位和256比特位的消息摘要。一般认为，摘要的最终输出越长，该摘要算法就越安全。变长输入，定长输出。")]),t._v(" "),_("p",[t._v("只要输入的消息不同，对其进行摘要以后产生的摘要消息也必不相同；但相同的输入必会产生相同的输出。这正是好的消息摘要算法所具有的性质：输入改变了，输出也就改变了；两条相似的消息的摘要确不相近，甚至会大相径庭。从理论上来说，不管使用什么样的摘要算法，必然存在2个不同的消息，对应同样的摘要。因为输入是一个无穷集合，而输出是一个有限集合，所以从数学上来说，必然存在多对一的关系。但是实际上，很难或者说根本不可能人为的造出具有同样摘要的2个不同消息。所以我们选择摘要算法的时候，要注意其安全性。比如现在MD5就是不安全的，已经被国内王小云破解。")]),t._v(" "),_("p",[t._v("消息摘要是单向、不可逆的。只能进行正向的信息摘要，而无法从摘要中恢复出任何的原始消息，甚至根本就找不到任何与原信息相关的信息。当然，可以采用强力攻击的方法，即尝试每一个可能的信息，计算其摘要，看看是否与已有的摘要相同，如果这样做，最终肯定会恢复出摘要的消息。但实际上，要得到的信息可能是无穷个消息之一，所以这种强力攻击几乎是无效的。")]),t._v(" "),_("p",[t._v("消息摘要算法来源于CRC算法，最初CRC算法是用来验证数据完整性的，即我们常见的奇偶校验码、循环冗余校验，在CRC基础上发展处了MD和SHA量大算法家族，CRC比这些算法都要早，MD算法比SHA算法早，SHA算法是对MD算法的改进。再后来则发展出了可以带有密码的消息摘要算法-MAC算法。\n消息摘要算法包括三大类，MD、SHA和MAC算法，MD的分类是按照版本规定的，SHA则是按照适用的消息长度分类的：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("MD算法： Message Digest Algorithm ，目前主流的是MD5算法，为第五版算法，之前有MD2、MD3、MD4算法。")])]),t._v(" "),_("li",[_("p",[t._v("SHA算法：安全哈希算法（Secure Hash Algorithm）主要适用于数字签名标准（Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA）。")])]),t._v(" "),_("li",[_("p",[t._v("MAC算法：带有密码信息的信息摘要算法，是对MD和SHA算法的演变和改进，包括HmacMD2、HmacMD4、HmacMD5、HmacSHA-256等。")])])]),t._v(" "),_("h2",{attrs:{id:"二、对称-非对称加密算法在https协议中的应用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、对称-非对称加密算法在https协议中的应用"}},[t._v("#")]),t._v(" 二、对称/非对称加密算法在HTTPS协议中的应用")]),t._v(" "),_("p",[t._v("HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。具体是如何进行加密，解密，验证的，且看下图。")]),t._v(" "),_("p",[_("img",{attrs:{src:"/Jerome-Blog/other-page5-1.png",alt:""}})]),t._v(" "),_("ol",[_("li",[t._v("客户端发起HTTPS请求")])]),t._v(" "),_("p",[t._v("这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("服务端的配置")])]),t._v(" "),_("p",[t._v("采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。")]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("传送证书")])]),t._v(" "),_("p",[t._v("这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。")]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("客户端解析证书")])]),t._v(" "),_("p",[t._v("这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。")]),t._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[t._v("传送加密信息")])]),t._v(" "),_("p",[t._v("这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。")]),t._v(" "),_("ol",{attrs:{start:"6"}},[_("li",[t._v("服务段解密信息")])]),t._v(" "),_("p",[t._v("服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。")]),t._v(" "),_("ol",{attrs:{start:"7"}},[_("li",[t._v("传输加密后的信息")])]),t._v(" "),_("p",[t._v("这部分信息是服务段用私钥加密后的信息，可以在客户端被还原")]),t._v(" "),_("ol",{attrs:{start:"8"}},[_("li",[t._v("客户端解密信息")])]),t._v(" "),_("p",[t._v("客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。")])])}),[],!1,null,null,null);v.default=s.exports}}]);