(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{385:function(s,t,e){"use strict";e.r(t);var a=e(43),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"regjsgen"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regjsgen"}},[s._v("#")]),s._v(" regjsgen "),e("a",{attrs:{href:"https://travis-ci.org/bnjmnt4n/regjsgen",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://travis-ci.org/bnjmnt4n/regjsgen.svg?branch=master",alt:"Build status"}}),e("OutboundLink")],1),s._v(" "),e("a",{attrs:{href:"https://codecov.io/gh/bnjmnt4n/regjsgen",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://codecov.io/gh/bnjmnt4n/regjsgen/branch/master/graph/badge.svg",alt:"Code coverage status"}}),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("Generate regular expressions from "),e("a",{attrs:{href:"https://github.com/jviereck/regjsparser",target:"_blank",rel:"noopener noreferrer"}},[s._v("regjsparser"),e("OutboundLink")],1),s._v("’s AST.")]),s._v(" "),e("h2",{attrs:{id:"installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[s._v("#")]),s._v(" Installation")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" i regjsgen\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[s._v("#")]),s._v(" API")]),s._v(" "),e("h3",{attrs:{id:"regjsgen-generate-ast"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regjsgen-generate-ast"}},[s._v("#")]),s._v(" "),e("code",[s._v("regjsgen.generate(ast)")])]),s._v(" "),e("p",[s._v("This function accepts an abstract syntax tree representing a regular expression (see "),e("a",{attrs:{href:"https://github.com/jviereck/regjsparser",target:"_blank",rel:"noopener noreferrer"}},[s._v("regjsparser"),e("OutboundLink")],1),s._v("), and returns the generated regular expression string.")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" regjsparser "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'regjsparser'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" regjsgen "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'regjsgen'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Generate an AST with `regjsparser`.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" ast "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" regjsparser"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Modify AST")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// …")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Generate `RegExp` string with `regjsgen`.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" regex "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" regjsgen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("generate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ast"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h2",{attrs:{id:"support"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#support"}},[s._v("#")]),s._v(" Support")]),s._v(" "),e("p",[s._v("Tested in Node.js 0.10, 0.12, 4, 6, 8, 10, 12 and 14."),e("br"),s._v("\nCompatible with regjsparser v0.6.4’s AST.")])])}),[],!1,null,null,null);t.default=r.exports}}]);